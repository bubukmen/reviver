#!/usr/bin/env python

try:

	import sys, os, getopt, reviverTools, yaml
	from datetime import datetime
except ImportError as err:
	print('Error while loading ' + err.name + '.\nYou probably need to install this module.')
	sys.exit(1)

def napoveda():
	print('''
Reviver is modular application for making backup of your files, databases etc. on your server or PC.
Usage: reviver [flags]
Flags:

-h, --help                            Show this help message
-c <filename>, --config <filename>    Use different configuration file than /etc/reviver/reviver.yaml
-F, --force                           Force full backup and name it as force
	''')
	sys.exit(0)

def importClass(name):
	mod = __import__(name)
	components = name.split('.')
	for comp in components[1:]:
		mod = getattr(mod, comp)
	return mod

def main():
	forced = 'N'
	demon = 'N'
	configFile = '/etc/reviver/reviver.yaml'

	try:
		opts, args = getopt.getopt(sys.argv[1:], 'hc:F', ['help', 'config=', 'force'])
	except getopt.error as msg:
		napoveda()
	for o, a in opts:
		if o in ('-h', '--help'):
			napoveda()
		elif o in ('-c', '--config'):
			configFile = a
		elif o in ('-F', '--force'):
			forced = 'Y'

	if os.getuid() == 0:
		if os.access(configFile, os.F_OK):
			if os.access(configFile, os.R_OK):
				f = open(configFile, 'r')
				prepString = f.read()
				f.close()
				try:
					cnfP = yaml.load(prepString)
				except yaml.parser.ParserError as ymlerr:
					print('Error while parsing config file ' + configFile)
					sys.exit(1)
				if 'global' not in cnfP:
					print('Error, cannot continue - Missing section global in configuration file ' + configFile)
					sys.exit(1)
				today = datetime.today();
				for i in cnfP:
					if i != 'global':
						for instructions in cnfP[i]:
							tmpClass = importClass('plugins.' + i)
							tmpClass.action(cnfP['global'], instructions, forced, today)
			else:
				print('File ' + configFile + ' has no read permission.')
				sys.exit(1)
		else:
			print('Configuration file ' + configFile + ' not exist!')
			sys.exit(1)
	else:
		print('Application must be run as root!')
		sys.exit(1)

if __name__ == '__main__':
	sys.exit(main())
